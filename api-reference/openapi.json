{
  "openapi": "3.0.1",
  "info": {
    "title": "AutoCaption API",
    "description": "An API to use AutoCaption's services for video transcription and video generation with captions.",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.autocaption.io/v1"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/signedUrl": {
      "get": {
        "summary": "GET signed url to upload",
        "description": "Returns a unique file identifier, a URL, and fields required for uploading a file to S3.",
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "The name of the file to be uploaded.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A map of fields needed to upload the file, including the pre-signed URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_upload_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/transcript": {
      "post": {
        "summary": "Transcript a video",
        "description": "Accepts a file name and language, and returns a job ID for the transcription task.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_transcript_body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully started the transcription job.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_transcript_response_200"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The request body is missing or malformed."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/transcript/{jobId}": {
      "get": {
        "summary": "Get Transcription Result",
        "description": "Retrieves the result of a transcription job by its ID. Words are only included if the job status is COMPLETED.",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the transcription job.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transcription job details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The status of the transcription job.",
                      "enum": [
                        "COMPLETED",
                        "IN_QUEUE",
                        "FAILED",
                        "IN_PROGRESS"
                      ]
                    },
                    "words": {
                      "type": "array",
                      "description": "The transcribed words, available only if the job status is COMPLETED.",
                      "items": {
                        "$ref": "#/components/schemas/Word"
                      },
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/templates": {
      "get": {
        "summary": "Get Templates",
        "description": "Retrieves a list of templates available.",
        "responses": {
          "200": {
            "description": "A list of templates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Template"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/templates/{templateId}": {
      "get": {
        "summary": "Get Specific Template",
        "description": "Retrieves details of a specific template by its ID.",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the template.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed information about the template.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateDetail"
                }
              }
            }
          }
        }
      }
    },
    "/fonts": {
      "get": {
        "summary": "Get Fonts List",
        "description": "Retrieves a list of available font names for the specified language.",
        "parameters": [
          {
            "name": "lang",
            "in": "query",
            "required": true,
            "description": "Language code to filter the fonts.",
            "schema": {
              "type": "string",
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of font names available for the specified language.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "Roboto",
                    "The Bold",
                    "Lemon Milk",
                    "Heavitas",
                    "Business Growth",
                    "Built Titling",
                    "Montserrat Bold"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/generate": {
      "post": {
        "summary": "Generate Video",
        "description": "Generates a video based on provided input, words, and configuration, then returns a URL to download the generated file.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "string",
                    "description": "Identifier of the input file for generation."
                  },
                  "words": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Word"
                    },
                    "description": "Array of words to be included in the generated file."
                  },
                  "config": {
                    "$ref": "#/components/schemas/TemplateConfig"
                  }
                },
                "required": [
                  "input",
                  "words",
                  "config"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "URL to download the generated file.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "download_url": {
                      "type": "string",
                      "description": "Direct URL to download the generated file."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "v1_upload_response_200": {
        "required": [
          "fields",
          "file",
          "url"
        ],
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "The unique identifier for the file, used as the file name in S3."
          },
          "url": {
            "type": "string",
            "description": "The URL of the S3 bucket to which the file should be uploaded."
          },
          "fields": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "bucket": {
                "type": "string"
              },
              "X-Amz-Algorithm": {
                "type": "string"
              },
              "X-Amz-Credential": {
                "type": "string"
              },
              "X-Amz-Date": {
                "type": "string"
              },
              "Policy": {
                "type": "string"
              },
              "X-Amz-Signature": {
                "type": "string"
              }
            },
            "description": "A map containing all the fields required for the upload server."
          }
        }
      },
      "v1_transcript_body": {
        "required": [
          "input",
          "lang"
        ],
        "type": "object",
        "properties": {
          "input": {
            "type": "string",
            "description": "The key returned by the signedUrl."
          },
          "lang": {
            "type": "string",
            "description": "The language code of the video"
          }
        }
      },
      "v1_transcript_response_200": {
        "required": [
          "job_id"
        ],
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "description": "The unique identifier for the transcription job."
          }
        }
      },
      "Word": {
        "type": "object",
        "properties": {
          "start": {
            "type": "number",
            "format": "float",
            "description": "Start time of the word in seconds."
          },
          "end": {
            "type": "number",
            "format": "float",
            "description": "End time of the word in seconds."
          },
          "word": {
            "type": "string",
            "description": "The word as transcribed."
          },
          "punctuated_word": {
            "type": "string",
            "description": "The word with punctuation."
          }
        },
        "required": [
          "start",
          "end",
          "word",
          "punctuated_word"
        ]
      },
      "Template": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the template. Initially numeric, but will accommodate UUIDs as well."
          },
          "name": {
            "type": "string",
            "description": "The name of the template."
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "TemplateDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the template."
          },
          "name": {
            "type": "string",
            "description": "The name of the template."
          },
          "config": {
            "$ref": "#/components/schemas/TemplateConfig"
          }
        }
      },
      "TemplateConfig": {
        "type": "object",
        "properties": {
          "colors": {
            "$ref": "#/components/schemas/TemplateColors"
          },
          "modes": {
            "$ref": "#/components/schemas/TemplateModes"
          },
          "sizes": {
            "$ref": "#/components/schemas/TemplateSizes"
          },
          "linesCount": {
            "type": "integer"
          },
          "wordsPerLineCount": {
            "type": "integer"
          },
          "wordHasBackground": {
            "type": "boolean"
          },
          "wordHasPunctuation": {
            "type": "boolean"
          },
          "wordHasShadow": {
            "type": "boolean"
          },
          "wordHasCustomShadowColor": {
            "type": "boolean"
          },
          "emojiAnimated": {
            "type": "boolean"
          },
          "capitalizationType": {
            "$ref": "#/components/schemas/CapitalizationTypeEnum"
          }
        }
      },
      "TemplateColors": {
        "type": "object",
        "properties": {
          "defaultColor": {
            "$ref": "#/components/schemas/ColorArray"
          },
          "spokenColor": {
            "$ref": "#/components/schemas/ColorArray"
          },
          "hilightColor": {
            "$ref": "#/components/schemas/ColorArray"
          },
          "strokeColor": {
            "$ref": "#/components/schemas/ColorArray"
          },
          "backgroundColor": {
            "$ref": "#/components/schemas/ColorArray"
          },
          "shadowColor": {
            "$ref": "#/components/schemas/ColorArray"
          }
        }
      },
      "ColorArray": {
        "type": "object",
        "properties": {
          "colors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Color"
            }
          }
        }
      },
      "Color": {
        "type": "object",
        "properties": {
          "r": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 255
          },
          "g": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 255
          },
          "b": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 255
          }
        }
      },
      "TemplateModes": {
        "type": "object",
        "properties": {
          "displayMode": {
            "$ref": "#/components/schemas/DisplayModeEnum"
          },
          "displayWords": {
            "$ref": "#/components/schemas/DisplayWordsEnum"
          },
          "spokenMode": {
            "$ref": "#/components/schemas/SpokenModeEnum"
          },
          "effectType": {
            "$ref": "#/components/schemas/EffectTypeEnum"
          },
          "effectMode": {
            "$ref": "#/components/schemas/EffectModeEnum"
          },
          "displayEmojis": {
            "$ref": "#/components/schemas/DisplayEmojiEnum"
          }
        }
      },
      "TemplateSizes": {
        "type": "object",
        "properties": {
          "fontSize": {
            "type": "integer"
          },
          "strokeSize": {
            "type": "integer"
          },
          "blurSize": {
            "type": "integer"
          },
          "emojiSize": {
            "type": "integer"
          },
          "backgroundRadius": {
            "type": "integer"
          }
        },
        "required": [
          "fontSize"
        ]
      },
      "DisplayModeEnum": {
        "type": "string",
        "enum": [
          "ALL",
          "LINE",
          "WORD"
        ]
      },
      "DisplayWordsEnum": {
        "type": "string",
        "enum": [
          "PUNCTUATION",
          "FIXED_COUNT"
        ]
      },
      "DisplayEmojiEnum": {
        "type": "string",
        "enum": [
          "WORD",
          "LINE"
        ]
      },
      "SpokenModeEnum": {
        "type": "string",
        "enum": [
          "LINE",
          "WORD"
        ]
      },
      "EffectTypeEnum": {
        "type": "string",
        "enum": [
          "DISABLED",
          "POP",
          "BIG",
          "SMOOTH_POP",
          "FADE",
          "FONT"
        ]
      },
      "EffectModeEnum": {
        "type": "string",
        "enum": [
          "LINE",
          "WORD",
          "GROUP"
        ]
      },
      "CapitalizationTypeEnum": {
        "type": "string",
        "enum": [
          "UPPERCASE",
          "LOWERCASE",
          "TITLECASE"
        ]
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    }
  }
}